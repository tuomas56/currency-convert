{
  "name": "currency-convert",
  "tagline": "A type-safe currency conversion library for Haskell.",
  "body": "# currency-convert\r\n\r\nProperty    | Value\r\n------------|----------------------\r\nModule      | Data.Currency.Convert\r\nDescription | Typesafe currency coversion using exchange rates from various sources.\r\nCopyright   | &copy; Tuomas Laakkonen 2016\r\nLicense     | BSD3\r\nMaintainer  | pigworts2@gmail.com\r\nStability   | Experimental\r\nPortability | Non-portable (GHC extensions)\r\n\r\nThis module allows values of currency to be converted from one currency to another using exchange rates from various sources.\r\n\r\nThe basic operation for this module is as follows:\r\n\r\nFirst, get a conversion function (with `getDefaultConverter` or `getConverter`):\r\n\r\n```haskell\r\n    >>> Converter convert <- getDefaultConverter\r\n```\r\n\r\nThen, construct some value of currency using the convenience functions, and convert it using the convert function you just got:\r\n\r\n```haskell\r\n    >>> convert (usd 100) :: EUR\r\n    90.0 eur\r\n```\r\n\r\nThe result type of `convert` defines what currency the value will be converted into.\r\n\r\n`Currency` implements `Num`, `Fractional` and `Real` so the usual arithmetic operations are defined, and its value can be extracted with `toRational`.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}